{"version":3,"sources":["createStackNavigator.tsx"],"names":["React","useNavigationBuilder","createNavigatorFactory","StackRouter","StackActions","StackView","StackNavigator","initialRouteName","children","screenOptions","rest","state","descriptors","navigation","useEffect","addListener","e","isFocused","requestAnimationFrame","index","defaultPrevented","dispatch","popToTop","target","key"],"mappings":";;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SACEC,oBADF,EAEEC,sBAFF,EAKEC,WALF,EAQEC,YARF,QASO,0BATP;AAUA,OAAOC,SAAP,MAAsB,0BAAtB;;AAWA,SAASC,cAAT,OAKU;AAAA,MALc;AACtBC,IAAAA,gBADsB;AAEtBC,IAAAA,QAFsB;AAGtBC,IAAAA;AAHsB,GAKd;AAAA,MADLC,IACK;;AACR,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA,WAAT;AAAsBC,IAAAA;AAAtB,MAAqCZ,oBAAoB,CAK7DE,WAL6D,EAKhD;AACbI,IAAAA,gBADa;AAEbC,IAAAA,QAFa;AAGbC,IAAAA;AAHa,GALgD,CAA/D;AAWAT,EAAAA,KAAK,CAACc,SAAN,CACE,MACED,UAAU,CAACE,WAAX,IACAF,UAAU,CAACE,WAAX,CAAuB,UAAvB,EAAmCC,CAAC,IAAI;AACtC,UAAMC,SAAS,GAAGJ,UAAU,CAACI,SAAX,EAAlB,CADsC,CAGtC;AACA;;AACAC,IAAAA,qBAAqB,CAAC,MAAM;AAC1B,UACEP,KAAK,CAACQ,KAAN,GAAc,CAAd,IACAF,SADA,IAEA,CAAED,CAAD,CAAkCI,gBAHrC,EAIE;AACA;AACA;AACAP,QAAAA,UAAU,CAACQ,QAAX,mBACKjB,YAAY,CAACkB,QAAb,EADL;AAEEC,UAAAA,MAAM,EAAEZ,KAAK,CAACa;AAFhB;AAID;AACF,KAboB,CAArB;AAcD,GAnBD,CAHJ,EAuBE,CAACX,UAAD,EAAaF,KAAK,CAACQ,KAAnB,EAA0BR,KAAK,CAACa,GAAhC,CAvBF;AA0BA,SACE,oBAAC,SAAD,eACMd,IADN;AAEE,IAAA,KAAK,EAAEC,KAFT;AAGE,IAAA,WAAW,EAAEC,WAHf;AAIE,IAAA,UAAU,EAAEC;AAJd,KADF;AAQD;;AAED,eAAeX,sBAAsB,CAKnCI,cALmC,CAArC","sourcesContent":["import * as React from 'react';\nimport {\n  useNavigationBuilder,\n  createNavigatorFactory,\n  DefaultNavigatorOptions,\n  EventArg,\n  StackRouter,\n  StackRouterOptions,\n  StackNavigationState,\n  StackActions,\n} from '@react-navigation/native';\nimport StackView from '../views/Stack/StackView';\nimport {\n  StackNavigationConfig,\n  StackNavigationOptions,\n  StackNavigationEventMap,\n} from '../types';\n\ntype Props = DefaultNavigatorOptions<StackNavigationOptions> &\n  StackRouterOptions &\n  StackNavigationConfig;\n\nfunction StackNavigator({\n  initialRouteName,\n  children,\n  screenOptions,\n  ...rest\n}: Props) {\n  const { state, descriptors, navigation } = useNavigationBuilder<\n    StackNavigationState,\n    StackRouterOptions,\n    StackNavigationOptions,\n    StackNavigationEventMap\n  >(StackRouter, {\n    initialRouteName,\n    children,\n    screenOptions,\n  });\n\n  React.useEffect(\n    () =>\n      navigation.addListener &&\n      navigation.addListener('tabPress', e => {\n        const isFocused = navigation.isFocused();\n\n        // Run the operation in the next frame so we're sure all listeners have been run\n        // This is necessary to know if preventDefault() has been called\n        requestAnimationFrame(() => {\n          if (\n            state.index > 0 &&\n            isFocused &&\n            !(e as EventArg<'tabPress', true>).defaultPrevented\n          ) {\n            // When user taps on already focused tab and we're inside the tab,\n            // reset the stack to replicate native behaviour\n            navigation.dispatch({\n              ...StackActions.popToTop(),\n              target: state.key,\n            });\n          }\n        });\n      }),\n    [navigation, state.index, state.key]\n  );\n\n  return (\n    <StackView\n      {...rest}\n      state={state}\n      descriptors={descriptors}\n      navigation={navigation}\n    />\n  );\n}\n\nexport default createNavigatorFactory<\n  StackNavigationState,\n  StackNavigationOptions,\n  StackNavigationEventMap,\n  typeof StackNavigator\n>(StackNavigator);\n"]}