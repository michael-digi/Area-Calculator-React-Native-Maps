{"version":3,"sources":["CardContainer.tsx"],"names":["EPSILON","CardContainer","active","cardOverlayEnabled","cardShadowEnabled","cardStyle","cardStyleInterpolator","closing","gesture","focused","gestureDirection","gestureEnabled","gestureResponseDistance","gestureVelocityImpact","getPreviousRoute","getFocusedRoute","headerMode","headerShown","headerStyleInterpolator","headerTransparent","headerHeight","onHeaderHeightChange","index","layout","onCloseRoute","onOpenRoute","onPageChangeCancel","onPageChangeConfirm","onPageChangeStart","onTransitionEnd","onTransitionStart","previousScene","renderHeader","renderScene","safeAreaInsetBottom","safeAreaInsetLeft","safeAreaInsetRight","safeAreaInsetTop","scene","transitionSpec","React","useEffect","handleOpen","route","handleClose","handleTransitionStart","insets","top","right","bottom","left","colors","pointerEvents","setPointerEvents","useState","listener","progress","next","addListener","value","removeListener","current","marginTop","backgroundColor","background","StyleSheet","absoluteFill","styles","container","mode","scenes","styleInterpolator","onContentHeightChange","memo","create","flex","flexDirection"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Animated, View, StyleSheet, StyleProp, ViewStyle } from 'react-native';\nimport { Route, useTheme } from '@react-navigation/native';\nimport { Props as HeaderContainerProps } from '../Header/HeaderContainer';\nimport Card from './Card';\nimport HeaderHeightContext from '../../utils/HeaderHeightContext';\nimport { Scene, Layout, StackHeaderMode, TransitionPreset } from '../../types';\n\ntype Props = TransitionPreset & {\n  index: number;\n  active: boolean;\n  focused: boolean;\n  closing: boolean;\n  layout: Layout;\n  gesture: Animated.Value;\n  previousScene?: Scene<Route<string>>;\n  scene: Scene<Route<string>>;\n  safeAreaInsetTop: number;\n  safeAreaInsetRight: number;\n  safeAreaInsetBottom: number;\n  safeAreaInsetLeft: number;\n  cardOverlayEnabled?: boolean;\n  cardShadowEnabled?: boolean;\n  cardStyle?: StyleProp<ViewStyle>;\n  getPreviousRoute: (props: {\n    route: Route<string>;\n  }) => Route<string> | undefined;\n  getFocusedRoute: () => Route<string>;\n  renderHeader: (props: HeaderContainerProps) => React.ReactNode;\n  renderScene: (props: { route: Route<string> }) => React.ReactNode;\n  onOpenRoute: (props: { route: Route<string> }) => void;\n  onCloseRoute: (props: { route: Route<string> }) => void;\n  onTransitionStart?: (\n    props: { route: Route<string> },\n    closing: boolean\n  ) => void;\n  onTransitionEnd?: (props: { route: Route<string> }, closing: boolean) => void;\n  onPageChangeStart?: () => void;\n  onPageChangeConfirm?: () => void;\n  onPageChangeCancel?: () => void;\n  gestureEnabled?: boolean;\n  gestureResponseDistance?: {\n    vertical?: number;\n    horizontal?: number;\n  };\n  gestureVelocityImpact?: number;\n  headerMode: StackHeaderMode;\n  headerShown?: boolean;\n  headerTransparent?: boolean;\n  headerHeight: number;\n  onHeaderHeightChange: (props: {\n    route: Route<string>;\n    height: number;\n  }) => void;\n};\n\nconst EPSILON = 0.1;\n\nfunction CardContainer({\n  active,\n  cardOverlayEnabled,\n  cardShadowEnabled,\n  cardStyle,\n  cardStyleInterpolator,\n  closing,\n  gesture,\n  focused,\n  gestureDirection,\n  gestureEnabled,\n  gestureResponseDistance,\n  gestureVelocityImpact,\n  getPreviousRoute,\n  getFocusedRoute,\n  headerMode,\n  headerShown,\n  headerStyleInterpolator,\n  headerTransparent,\n  headerHeight,\n  onHeaderHeightChange,\n  index,\n  layout,\n  onCloseRoute,\n  onOpenRoute,\n  onPageChangeCancel,\n  onPageChangeConfirm,\n  onPageChangeStart,\n  onTransitionEnd,\n  onTransitionStart,\n  previousScene,\n  renderHeader,\n  renderScene,\n  safeAreaInsetBottom,\n  safeAreaInsetLeft,\n  safeAreaInsetRight,\n  safeAreaInsetTop,\n  scene,\n  transitionSpec,\n}: Props) {\n  React.useEffect(() => {\n    onPageChangeConfirm?.();\n  }, [active, onPageChangeConfirm]);\n\n  const handleOpen = () => {\n    onTransitionEnd?.({ route: scene.route }, false);\n    onOpenRoute({ route: scene.route });\n  };\n\n  const handleClose = () => {\n    onTransitionEnd?.({ route: scene.route }, true);\n    onCloseRoute({ route: scene.route });\n  };\n\n  const handleTransitionStart = ({ closing }: { closing: boolean }) => {\n    if (active && closing) {\n      onPageChangeConfirm?.();\n    } else {\n      onPageChangeCancel?.();\n    }\n\n    onTransitionStart?.({ route: scene.route }, closing);\n  };\n\n  const insets = {\n    top: safeAreaInsetTop,\n    right: safeAreaInsetRight,\n    bottom: safeAreaInsetBottom,\n    left: safeAreaInsetLeft,\n  };\n\n  const { colors } = useTheme();\n\n  const [pointerEvents, setPointerEvents] = React.useState<'box-none' | 'none'>(\n    'box-none'\n  );\n\n  React.useEffect(() => {\n    // `addListener` may not exist on web and older versions of React Native\n    // @ts-ignore\n    const listener = scene.progress.next?.addListener?.(\n      ({ value }: { value: number }) => {\n        setPointerEvents(value <= EPSILON ? 'box-none' : 'none');\n      }\n    );\n\n    return () => {\n      if (listener) {\n        // @ts-ignore\n        scene.progress.next?.removeListener?.(listener);\n      }\n    };\n  }, [pointerEvents, scene.progress.next]);\n\n  return (\n    <Card\n      index={index}\n      gestureDirection={gestureDirection}\n      layout={layout}\n      insets={insets}\n      gesture={gesture}\n      current={scene.progress.current}\n      next={scene.progress.next}\n      closing={closing}\n      onOpen={handleOpen}\n      onClose={handleClose}\n      overlayEnabled={cardOverlayEnabled}\n      shadowEnabled={cardShadowEnabled}\n      onTransitionStart={handleTransitionStart}\n      onGestureBegin={onPageChangeStart}\n      onGestureCanceled={onPageChangeCancel}\n      gestureEnabled={gestureEnabled}\n      gestureResponseDistance={gestureResponseDistance}\n      gestureVelocityImpact={gestureVelocityImpact}\n      transitionSpec={transitionSpec}\n      styleInterpolator={cardStyleInterpolator}\n      accessibilityElementsHidden={!focused}\n      importantForAccessibility={focused ? 'auto' : 'no-hide-descendants'}\n      pointerEvents={active ? 'box-none' : pointerEvents}\n      containerStyle={\n        headerMode === 'float' && !headerTransparent && headerShown !== false\n          ? { marginTop: headerHeight }\n          : null\n      }\n      contentStyle={[{ backgroundColor: colors.background }, cardStyle]}\n      style={StyleSheet.absoluteFill}\n    >\n      <View style={styles.container}>\n        <View style={styles.scene}>\n          <HeaderHeightContext.Provider value={headerHeight}>\n            {renderScene({ route: scene.route })}\n          </HeaderHeightContext.Provider>\n        </View>\n        {headerMode === 'screen'\n          ? renderHeader({\n              mode: 'screen',\n              layout,\n              insets,\n              scenes: [previousScene, scene],\n              getPreviousRoute,\n              getFocusedRoute,\n              gestureDirection,\n              styleInterpolator: headerStyleInterpolator,\n              onContentHeightChange: onHeaderHeightChange,\n            })\n          : null}\n      </View>\n    </Card>\n  );\n}\n\nexport default React.memo(CardContainer);\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'column-reverse',\n  },\n  scene: {\n    flex: 1,\n  },\n});\n"]}