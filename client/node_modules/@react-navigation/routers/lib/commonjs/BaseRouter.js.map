{"version":3,"sources":["BaseRouter.tsx"],"names":["BaseRouter","getStateForAction","state","action","type","index","source","routes","findIndex","r","key","map","i","params","payload","nextState","stale","routeNames","length","some","name","includes","route","shouldActionChangeFocus"],"mappings":";;;;;;;;;;;;;AAEA;;;;AAIA,MAAMA,UAAU,GAAG;AACjBC,EAAAA,iBAAiB,CACfC,KADe,EAEfC,MAFe,EAGqB;AACpC,YAAQA,MAAM,CAACC,IAAf;AACE,WAAK,YAAL;AAAmB;AACjB,gBAAMC,KAAK,GAAGF,MAAM,CAACG,MAAP,GACVJ,KAAK,CAACK,MAAN,CAAaC,SAAb,CAAuBC,CAAC,IAAIA,CAAC,CAACC,GAAF,KAAUP,MAAM,CAACG,MAA7C,CADU,GAEVJ,KAAK,CAACG,KAFV;;AAIA,cAAIA,KAAK,KAAK,CAAC,CAAf,EAAkB;AAChB,mBAAO,IAAP;AACD;;AAED,mCACKH,KADL;AAEEK,YAAAA,MAAM,EAAEL,KAAK,CAACK,MAAN,CAAaI,GAAb,CAAiB,CAACF,CAAD,EAAIG,CAAJ,KACvBA,CAAC,KAAKP,KAAN,qBACSI,CADT;AACYI,cAAAA,MAAM,oBAAOJ,CAAC,CAACI,MAAT,MAAoBV,MAAM,CAACW,OAAP,CAAeD,MAAnC;AADlB,iBAEIJ,CAHE;AAFV;AAQD;;AAED,WAAK,OAAL;AAAc;AACZ,gBAAMM,SAAS,GAAGZ,MAAM,CAACW,OAAzB;;AAEA,cAAIC,SAAS,CAACC,KAAV,KAAoB,KAAxB,EAA+B;AAC7B,gBACEd,KAAK,CAACe,UAAN,CAAiBC,MAAjB,KAA4BH,SAAS,CAACE,UAAV,CAAqBC,MAAjD,IACAH,SAAS,CAACE,UAAV,CAAqBE,IAArB,CAA0BC,IAAI,IAAI,CAAClB,KAAK,CAACe,UAAN,CAAiBI,QAAjB,CAA0BD,IAA1B,CAAnC,CAFF,EAGE;AACA,qBAAO,IAAP;AACD;AACF;;AAED,cACEL,SAAS,CAACR,MAAV,CAAiBY,IAAjB,CACGG,KAAD,IAA6B,CAACpB,KAAK,CAACe,UAAN,CAAiBI,QAAjB,CAA0BC,KAAK,CAACF,IAAhC,CADhC,CADF,EAIE;AACA,mBAAO,IAAP;AACD;;AAED,iBAAOL,SAAP;AACD;;AAED;AACE,eAAO,IAAP;AA5CJ;AA8CD,GAnDgB;;AAqDjBQ,EAAAA,uBAAuB,CAACpB,MAAD,EAAiC;AACtD,WAAOA,MAAM,CAACC,IAAP,KAAgB,UAAvB;AACD;;AAvDgB,CAAnB;eA0DeJ,U","sourcesContent":["import { CommonNavigationAction, NavigationState, PartialState } from './types';\n\n/**\n * Base router object that can be used when writing custom routers.\n * This provides few helper methods to handle common actions such as `RESET`.\n */\nconst BaseRouter = {\n  getStateForAction<State extends NavigationState>(\n    state: State,\n    action: CommonNavigationAction\n  ): State | PartialState<State> | null {\n    switch (action.type) {\n      case 'SET_PARAMS': {\n        const index = action.source\n          ? state.routes.findIndex(r => r.key === action.source)\n          : state.index;\n\n        if (index === -1) {\n          return null;\n        }\n\n        return {\n          ...state,\n          routes: state.routes.map((r, i) =>\n            i === index\n              ? { ...r, params: { ...r.params, ...action.payload.params } }\n              : r\n          ),\n        };\n      }\n\n      case 'RESET': {\n        const nextState = action.payload as State | PartialState<State>;\n\n        if (nextState.stale === false) {\n          if (\n            state.routeNames.length !== nextState.routeNames.length ||\n            nextState.routeNames.some(name => !state.routeNames.includes(name))\n          ) {\n            return null;\n          }\n        }\n\n        if (\n          nextState.routes.some(\n            (route: { name: string }) => !state.routeNames.includes(route.name)\n          )\n        ) {\n          return null;\n        }\n\n        return nextState;\n      }\n\n      default:\n        return null;\n    }\n  },\n\n  shouldActionChangeFocus(action: CommonNavigationAction) {\n    return action.type === 'NAVIGATE';\n  },\n};\n\nexport default BaseRouter;\n"]}